@page "/"
@using StrukturaDrzewiasta.Shared.Enums
@inject ITreeStructureService TreeStructureService

<PageTitle>Struktura Drzewiasta</PageTitle>

<div class="explorer">
    <div class="background">
        <div class="elements">
            <div class="control-panel">
                <div class="control-panel__left">
                    <MatButton Raised="true" OnClick="@(() => CreateRootNode())" Icon="@MatIconNames.Create_new_folder" Label="Stwórz nowy folder"></MatButton>
                    <MatButton Raised="true" OnClick="@(() => OpenNodes())" Icon="@MatIconNames.Unfold_more" Label="Rozwiń wszystkie"></MatButton>
                </div>
                <div class="control-panel__right">
                    <MatButton Raised="true" Label=@("Sortowanie: " + SelectSortingName()) OnClick="@HandleSortCategory" RefBack="@buttonForwardRef"></MatButton>
                    <MatMenu @ref="Menu" TargetForwardRef="@buttonForwardRef">
                        <MatList>
                            <MatListItem OnClick="@(() => HandleSortCategoryChanged(SortTypeEnum.Name))">Według nazwy</MatListItem>
                            <MatListItem OnClick="@(() => HandleSortCategoryChanged(SortTypeEnum.CreatedDate))">Według daty utworzenia</MatListItem>
                            <MatListItem OnClick="@(() => HandleSortCategoryChanged(SortTypeEnum.Custom))">Własne</MatListItem>
                        </MatList>
                    </MatMenu>
                </div>
            </div>
            <div class="explorer__nodes">
                @foreach (var node in Nodes)
                {
                    <NodeComponent RootNode="node" NodeAction="@HandleNodeAction" OpenNodesSignal="@OpenNodesSignal" NodeDisplayState="@NodeDisplayState" SiblingsAmount="@Nodes.Count" CloseParentNodesCallback="@CloseNodes" IsChildrenNodesClosed="@IsChildrenNodesClosed"/>
                }
            </div>
        </div>
    </div>
</div>

<AddNodeDialog @bind-dialogIsOpen="@CreateNodeDialog" ParentNode="SelectedNode" NewNodeCallback="CreateNode"/>
<EditNodeDialog @bind-dialogIsOpen="@EditNodeDialog" OldNode="SelectedNode" NewNodeCallback="EditNode"/>
<DeleteNodeDialog @bind-dialogIsOpen="@DeleteNodeDialog" NodeToDelete="SelectedNode" IdNodeToDeleteCallback="DeleteNode"/>
<MoveNodeDialog @bind-dialogIsOpen="@MoveNodeDialog" NodeToMove="SelectedNode" Nodes="Nodes" NodeToMoveCallback="MoveNode"/>

@code{
    List<ReadNodeTreeDto> Nodes { get; set; } = new List<ReadNodeTreeDto>();
    public SortTypeEnum SortCategory = SortTypeEnum.CreatedDate;
    
    public bool CreateNodeDialog { get; set; } = false;
    public bool EditNodeDialog { get; set; } = false;
    public bool DeleteNodeDialog { get; set; } = false;
    public bool MoveNodeDialog { get; set; } = false;
    public NodeDisplayStateEnum NodeDisplayState { get; set; } = NodeDisplayStateEnum.Default;

    public ReadNodeTreeDto SelectedNode { get; set; }
    
    private bool OpenNodesSignal {
        get
        {
            var openNodes = _openNodesSignal;
            if (SignalTTL-- == 0)
                _openNodesSignal = false;
            return openNodes;
        }
        
        set => _openNodesSignal = value;
    }
    private bool _openNodesSignal = false;
    private int SignalTTL = 0;

    private async Task GetNodes(SortTypeEnum sortedBy)
    {
        Nodes = new List<ReadNodeTreeDto>();
        Nodes = await TreeStructureService.GetNodeTree(sortedBy);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetNodes(SortCategory);
    }
    
    private ForwardRef buttonForwardRef = new ForwardRef();
    private BaseMatMenu Menu;
 
    public void HandleSortCategory(MouseEventArgs e)
    {
        this.Menu.OpenAsync();
    }
    
    private void HandleNodeAction(NodeAction nodeAction)
    {
        switch (nodeAction.Action)
        {
            case NodeActionEnum.Create:
                CreateNodeDialog = true;
                break;
            case NodeActionEnum.Edit:
                EditNodeDialog = true;
                break;
            case NodeActionEnum.Delete:
                DeleteNodeDialog = true;
                break;
            case NodeActionEnum.MoveSource:
                MoveNodeDialog = true;
                break;
            case NodeActionEnum.ReorderUp:
                ReorderNodes(new ReorderNodeDto()
                {
                    NodeId = nodeAction.Node.Id,
                    OrderDirectionEnum = OrderDirectionEnum.Up
                });
                break;
            case NodeActionEnum.ReorderDown:
                ReorderNodes(new ReorderNodeDto()
                {
                    NodeId = nodeAction.Node.Id,
                    OrderDirectionEnum = OrderDirectionEnum.Down
                });
                break;
        }
        SelectedNode = nodeAction.Node;
    }

    private void CreateRootNode()
    {
        HandleNodeAction(new NodeAction()
        {
            Action = NodeActionEnum.Create,
            Node = new ReadNodeTreeDto()
            {
                Id = 1
            }
        });
    }   
    
    private async void CreateNode(CreateNodeDto createNode)
    {
        await TreeStructureService.CreateNode(createNode);
        await GetNodes(SortCategory);
    }

    private async void EditNode(EditNodeDto editNode)
    {
        await TreeStructureService.EditNode(editNode);
        await GetNodes(SortCategory);
    }
    
    private async void DeleteNode(int nodeId)
    {
        await TreeStructureService.DeleteNode(nodeId);
        await GetNodes(SortCategory);
    }

    private async void MoveNode(MoveNodeDto moveNodeDto)
    {
        await TreeStructureService.MoveNode(moveNodeDto);
        await GetNodes(SortCategory);
    }
    
    private async void ReorderNodes(ReorderNodeDto reorderNodeDto)
    {
        await TreeStructureService.ReorderNodes(reorderNodeDto);
        await GetNodes(SortCategory);
    }

    private void OpenNodes()
    {
        SignalTTL = Nodes.Count - 1;
        OpenNodesSignal = true;
    }

    private void HandleSortCategoryChanged(SortTypeEnum category)
    {
        SortCategory = category;
        GetNodes(SortCategory);
        if (category == SortTypeEnum.Custom)
            NodeDisplayState = NodeDisplayStateEnum.CustomSort;
        else
            NodeDisplayState = NodeDisplayStateEnum.Default;
    }

    private string SelectSortingName()
    {
        if (SortCategory == SortTypeEnum.Name)
            return "Według nazwy";
        if (SortCategory == SortTypeEnum.CreatedDate)
            return "Według daty utworzenia";
        return "Własne";
    }
    
    [Parameter]
    public EventCallback<bool> CloseParentNodesCallback { get; set; }

    private int closeIndex = 0;
    [Parameter]
    public ToClose IsChildrenNodesClosed
    {
        get
        {
            Console.WriteLine(_isChildrenNodesClosed.IsChildrenNodesClosed);
            if (_isChildrenNodesClosed.SignalTTL == 0 && _isChildrenNodesClosed.IsChildrenNodesClosed)
            {
                closeIndex++;
                if (closeIndex == Nodes.Count)
                {
                    _isChildrenNodesClosed.IsChildrenNodesClosed = false;
                    _isChildrenNodesClosed.SignalTTL = 0;
                    closeIndex = 0;
                    StateHasChanged();
                }
                
                return new ToClose()
                {
                    IsChildrenNodesClosed = true,
                    SignalTTL = 1
                };
            }
            return new ToClose()
            {
                IsChildrenNodesClosed = false,
                SignalTTL = 0
            };
        }
        set{}
    }

    private ToClose _isChildrenNodesClosed = new ToClose()
    {
        IsChildrenNodesClosed = false,
        SignalTTL = 0
    };
    
    public void CloseNodes(bool close)
    {
        _isChildrenNodesClosed.IsChildrenNodesClosed = true;
        _isChildrenNodesClosed.SignalTTL = 0;
        StateHasChanged();
    }
}
