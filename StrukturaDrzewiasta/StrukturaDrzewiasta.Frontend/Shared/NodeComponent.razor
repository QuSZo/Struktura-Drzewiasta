@using StrukturaDrzewiasta.Shared.Enums
<div class="root">
    <div class="root__head" @onclick="() => ToogleVisible()">
        <span class="root__node-name">
            @if (NodeDisplayState == NodeDisplayStateEnum.CustomSort)
            {
                <div class="root__reorder" @onclick:stopPropagation="true" >
                    <MatIcon
                        @onclick="() => {if (!IsFirstNode()) CreateNodeAction(NodeActionEnum.ReorderUp); CloseParentNodesCallback.InvokeAsync(true);}"
                        Icon="@MatIconNames.Expand_less"
                        Class=@(IsFirstNode() ? "disable-pointer" : "pointer")/>
                    <MatIcon
                        @onclick="() => {if (!IsLastNode()) CreateNodeAction(NodeActionEnum.ReorderDown); CloseParentNodesCallback.InvokeAsync(true);}"
                        Icon="@MatIconNames.Expand_more"
                        Class=@(IsLastNode() ? "disable-pointer" : "pointer")/>
                </div>
            }
            <MatIcon Icon="@SetIconFolder()"></MatIcon>
            @RootNode.Name
        </span>
        <div class="root__icons">
            
                @if (NodeDisplayState == NodeDisplayStateEnum.Move)
                {
                    <div class="root__actions" @onclick:stopPropagation="true">
                        
                        <span tooltip="Przenieś do">
                            <MatIcon @onclick="() => CreateNodeAction(NodeActionEnum.MoveDestination)" Icon="@MatIconNames.Flight_land" Class="pointer"/>
                        </span>
                    </div>
                }
                else
                {
                    <div class="root__actions" @onclick:stopPropagation="true">
                        
                        <span tooltip="Dodaj folder">
                            <MatIcon @onclick="() => { CreateNodeAction(NodeActionEnum.Create);}" Icon="@MatIconNames.Create_new_folder" Class="pointer"/>
                        </span>
                        
                        <span tooltip="Zmień nazwę">
                            <MatIcon @onclick="() => CreateNodeAction(NodeActionEnum.Edit)" Icon="@MatIconNames.Edit" Class="pointer"/>
                        </span>
                            
                            <span tooltip="Usuń">
                            <MatIcon @onclick="() => CreateNodeAction(NodeActionEnum.Delete)" Icon="@MatIconNames.Delete" Class="pointer"/>
                        </span>
                            
                        <span tooltip="Przenieś">
                            <MatIcon @onclick="() => CreateNodeAction(NodeActionEnum.MoveSource)" Icon="@MatIconNames.Flight_takeoff" Class="pointer"/>
                        </span>
                            
                    </div>
                }
                
                <div class="root__drop-icon @SetIconArrow()">
                @if (RootNode.Nodes.Count != 0)
                {
                    <MatIcon Icon="@MatIconNames.Chevron_right"></MatIcon>
                }
            </div>
        </div>
    </div>
    @if (IsNodesVisible && RootNode.Nodes.Count > 0)
    {
        <div class="root__children">
            @foreach (var node in RootNode.Nodes)
            {
                <NodeComponent RootNode="@node" NodeDisplayState="@NodeDisplayState" NodeAction="@NodeActionPropagation" OpenNodesSignal="@OpenNodesSignal" SiblingsAmount="@RootNode.Nodes.Count" CloseParentNodesCallback="@CloseNodes" IsChildrenNodesClosed="@IsChildrenNodesClosed"/>
            }
        </div>
    }
</div>


@code{
    [Parameter]
    public NodeDisplayStateEnum NodeDisplayState { get; set; } = NodeDisplayStateEnum.Default;
    [Parameter]
    public int SiblingsAmount { get; set; }
    [Parameter]
    public ReadNodeTreeDto RootNode { get; set; }
    [Parameter]
    public EventCallback<NodeAction> NodeAction { get; set; }
    [Parameter]
    public bool OpenNodesSignal {
        get
        {
            var openNodes = _openNodesSignal;
            if (_openNodesSignalTTL-- == 0)
                _openNodesSignal = false;
            return openNodes;
        }
        set
        {
            if (value)
            {
                IsNodesVisible = value;
                OpenNodes();
            }
           
        } }
    [Parameter]
    public EventCallback<bool> CloseParentNodesCallback { get; set; }

    private int closeIndex = 0;
    [Parameter]
    public ToClose IsChildrenNodesClosed
    {
        get
        {
            if (_isChildrenNodesClosed.SignalTTL == 0 && _isChildrenNodesClosed.IsChildrenNodesClosed)
            {
                closeIndex++;
                if (closeIndex == RootNode.Nodes.Count)
                {
                    _isChildrenNodesClosed.IsChildrenNodesClosed = false;
                    _isChildrenNodesClosed.SignalTTL = 0;
                    closeIndex = 0;
                    StateHasChanged();
                }
                
                return new ToClose()
                {
                    IsChildrenNodesClosed = true,
                    SignalTTL = 1
                };
            }
            return new ToClose()
            {
                IsChildrenNodesClosed = false,
                SignalTTL = 0
            };
        }
        set
        {
            if (value.SignalTTL == 1)
            {
                IsNodesVisible = false;
                _isChildrenNodesClosed.IsChildrenNodesClosed = false;
                _isChildrenNodesClosed.SignalTTL = 0;
                StateHasChanged();
            }
        }
    }

    private ToClose _isChildrenNodesClosed = new ToClose()
    {
        IsChildrenNodesClosed = false,
        SignalTTL = 0
    };
    
    
    private bool _openNodesSignal = false;
    private int _openNodesSignalTTL = 0;
    
    private void OpenNodes()
    {
        _openNodesSignalTTL = RootNode.Nodes.Count - 1;
        _openNodesSignal = true;
    }

    public bool IsNodesVisible { get; set; } = false;

    private void ToogleVisible()
    {
        IsNodesVisible = !IsNodesVisible;
    }

    private string SetIconArrow()
    {
        return  IsNodesVisible ? "root__drop-icon--rotate" : "";
    }

    private string SetIconFolder()
    {
        return IsChildrenVisible() ? MatIconNames.Folder_open : MatIconNames.Folder;
    }

    private bool IsFirstNode() => RootNode.CustomSortId == 1;
    private bool IsLastNode() => RootNode.CustomSortId == SiblingsAmount;

    private bool IsChildrenVisible() => IsNodesVisible && RootNode.Nodes.Count != 0;

    private void CreateNodeAction(NodeActionEnum action)
    {
        
        var nodeAction = new NodeAction()
        {
            Node = RootNode,
            Action = action
        };
        
        NodeAction.InvokeAsync(nodeAction);
    }

    private void NodeActionPropagation(NodeAction nodeAction)
    {
        NodeAction.InvokeAsync(nodeAction);
    }

    public void CloseNodes(bool close)
    {
        _isChildrenNodesClosed.IsChildrenNodesClosed = true;
        _isChildrenNodesClosed.SignalTTL = 0;
        StateHasChanged();
    }
}